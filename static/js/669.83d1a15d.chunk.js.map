{"version":3,"file":"static/js/669.83d1a15d.chunk.js","mappings":"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","sources":["shared/helpers/control-helper.js","shared/form-control/input-control.js","pages/login/login.js"],"sourcesContent":["const ControlHelper = {\r\n    onChangeInputHandler: (event, dispatchState) => {\r\n        dispatchState(event.target.value);\r\n    }\r\n}\r\n\r\nexport default ControlHelper;\r\n","import {useCallback, useEffect, useState} from \"react\";\r\nimport controlHelper from \"../helpers/control-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from 'react'\r\n\r\nconst InputControl = ({\r\n                          labelName = '',\r\n                          initialValue = '',\r\n                          onChange,\r\n                          className = '',\r\n                          regexInput,\r\n                          isRequired = false,\r\n                          minLength,\r\n                          maxLength,\r\n                          isErrorEvent\r\n                      }) => {\r\n    const [validationMessage, setValidationMessage] = useState(undefined);\r\n\r\n    const validate = useCallback((newValue) => {\r\n        if (!!isRequired && newValue.length <= 0) {\r\n            return {\r\n                isSuccess: false,\r\n                message: `Please enter ${labelName}`\r\n            }\r\n        }\r\n\r\n        if (minLength && minLength * 1 > newValue.length) {\r\n            return {\r\n                isSuccess: false,\r\n                message: `${labelName} length must greater or equal than ${minLength}`\r\n            }\r\n        }\r\n\r\n        if (maxLength && maxLength * 1 < newValue.length) {\r\n            return {\r\n                isSuccess: false,\r\n                message: `${labelName} length must lower or equal than ${maxLength}`\r\n            }\r\n        }\r\n\r\n        if (!!regexInput && !regexInput.test(newValue)) {\r\n            return {\r\n                isSuccess: false,\r\n                message: `${labelName} is not qualified the rule`\r\n            }\r\n        }\r\n\r\n        return {\r\n            isSuccess: true,\r\n            message: ''\r\n        }\r\n    }, [isRequired, regexInput, minLength, maxLength, labelName])\r\n\r\n    useEffect(() => {\r\n        const validationResult = validate(initialValue);\r\n        setValidationMessage(validationResult.message);\r\n        isErrorEvent(!validationResult.isSuccess);\r\n    }, [initialValue, isErrorEvent, validate]);\r\n\r\n    const onValueChange = (newValue) => {\r\n        if (onChange) {\r\n            onChange(newValue);\r\n        }\r\n        const validationResult = validate(newValue);\r\n        setValidationMessage(validationResult.message);\r\n        isErrorEvent(!validationResult.isSuccess);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={className}>\r\n            <label className=\"form-label\">{labelName}</label>\r\n            <input type=\"text\" className={(!validationMessage ? 'is-valid' : 'is-invalid') + ' form-control'}\r\n                   value={initialValue}\r\n                   onChange={(event) => controlHelper.onChangeInputHandler(event, onValueChange)}\r\n                   placeholder={labelName}/>\r\n            {validationMessage && <div className=\"invalid-feedback\">\r\n                {validationMessage}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nInputControl.propTypes = {\r\n    labelName: PropTypes.string.isRequired,\r\n    initialValue: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    className: PropTypes.string,\r\n    regexInput: PropTypes.string,\r\n    isRequired: PropTypes.bool,\r\n    minLength: PropTypes.string,\r\n    maxLength: PropTypes.string,\r\n    isErrorEvent: PropTypes.func,\r\n}\r\n\r\nexport default InputControl;\r\n","import InputControl from \"../../shared/form-control/input-control\";\nimport React, { useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport loginService from \"../../services/login.service\";\nimport { ClipLoader } from \"react-spinners\";\nimport useLogin from \"../../hooks/login-hook\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isErrorUsername, setIsErrorUsername] = useState();\n  const [isErrorPassword, setIsErrorPassword] = useState();\n  const [incorrect, setIncorrect] = useState(null);\n  const loginButton = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n  const { isLoggedIn, handleLogin } = useLogin();\n  if (isLoggedIn) {\n    navigate(\"/\");\n  }\n  const loginHandler = () => {\n    if (isErrorUsername || isErrorPassword) {\n      return;\n    }\n\n    setIsLoading(true);\n    loginButton.current.disabled = true;\n    loginService\n      .login(username, password)\n      .then((res) => {\n        setIncorrect(null);\n        handleLogin(res.data);\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        if (err.response.status === 400) {\n          setIncorrect(\"Username and password is incorrect\");\n        } else {\n          setIncorrect(err.response.statusText);\n        }\n      })\n      .finally(() => {\n        loginButton.current.disabled = false;\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <form>\n      <div className=\"row mb-2\">\n        <InputControl\n          labelName=\"Username\"\n          className=\"col-md-4\"\n          initialValue={username}\n          onChange={setUsername}\n          isErrorEvent={setIsErrorUsername}\n          isRequired={true}\n        ></InputControl>\n      </div>\n      <div className=\"row mb-2\">\n        <InputControl\n          labelName=\"Password\"\n          className=\"col-md-4\"\n          initialValue={password}\n          onChange={setPassword}\n          isErrorEvent={setIsErrorPassword}\n          isRequired={true}\n          minLength=\"2\"\n        ></InputControl>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col-12\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={loginHandler}\n            ref={loginButton}\n          >\n            Login\n          </button>\n        </div>\n      </div>\n      {isLoading && <ClipLoader />}\n      {incorrect && (\n        <div className=\"row mb-2\">\n          <span className=\"text-danger\">{incorrect}</span>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default Login;\n"],"names":["onChangeInputHandler","event","dispatchState","target","value","labelName","initialValue","onChange","className","regexInput","isRequired","minLength","maxLength","isErrorEvent","useState","undefined","validationMessage","setValidationMessage","validate","useCallback","newValue","length","isSuccess","message","test","useEffect","validationResult","onValueChange","type","controlHelper","placeholder","navigate","useNavigate","username","setUsername","password","setPassword","isErrorUsername","setIsErrorUsername","isErrorPassword","setIsErrorPassword","incorrect","setIncorrect","loginButton","useRef","isLoading","setIsLoading","useLogin","isLoggedIn","handleLogin","onClick","current","disabled","loginService","then","res","data","catch","err","response","status","statusText","finally","ref","ClipLoader"],"sourceRoot":""}